<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"   
     default-autowire="byName" default-lazy-init="false">
     <!-- 持久层、业务层和控制层分别采用 @Repository、@Service 和 @Controller 对分层中的类进行注释，
     		而用 @Component 对那些比较中立的类进行注释
		<context:annotation-config/>     
		<context:component-scan base-package="com.suntel"/> -->
<!-- <aop:aspectj-autoproxy/>属性文件读入,使用JdbcPlaceholderConfigurer则可以从数据库读取配置信息 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/local/jdbc.properties</value>
			</list>
		</property>
	</bean>
    <!-- 数据源定义,使用Apache DBCP 连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 加入初始化连接数 -->
		<property name="initialSize" value="2" />
		<!-- 连接池的最大值. -->
		<property name="maxActive" value="200" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="30" />
		<property name="maxWait" value="1000" />
		<!-- 在每个connection中缓存一定数量的preparestatement，
		用于减少driver的statement对象创建，和数据库的网络交互以及数据库的cursor创建 -->
		<property name="poolPreparedStatements" value="true" />
		<!-- 自动提交关闭 -->
		<property name="defaultAutoCommit" value="false" />
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
   	</bean>
    
    <!-- Transaction manager for a single JDBC DataSource -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
        <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="/WEB-INF/config/configuration.xml"/>
        <property name="mapperLocations" value="classpath*:/com/sevendosoft/*/mapper/*.xml"/>
    </bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">  
		<constructor-arg index="0" ref="sqlSessionFactory" />  
	</bean>
	
	<!-- 支持 @AspectJ 标记  proxy-target-class="true" 设置默认为cglib进行事务托管--> 
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.sevendosoft.*.service..*.*(..))" advice-ref="txAdvice"/>
	</aop:config>
	
	  <!-- 配置事务传播特性:如果存在一个事务，则支持当前事务。如果没有事务则开启：REQUIRED -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
           <tx:method name="add*"    propagation="REQUIRED" rollback-for="java.lang.Exception"/>
           <tx:method name="del*"    propagation="REQUIRED" rollback-for="java.lang.Exception"/>
           <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
           <tx:method name="*Tx"     propagation="REQUIRED" rollback-for="java.lang.Exception"/>
           <tx:method name="*"       read-only="true"/>
       </tx:attributes>
    </tx:advice>
  
 	 <!-- 用于持有ApplicationContext,可以使用ApplicationContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean class="com.sevendo.framework.util.spring.ApplicationContextHolder"/>
</beans>